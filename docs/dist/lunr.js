var lunrIndex = [{"id":"changelog","title":"Changelog","body":"All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https:\/\/keepachangelog.com\/en\/1.0.0\/),\nand this project adheres to [Semantic Versioning](https:\/\/semver.org\/spec\/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.0.13] - 2025-05-10\n\n### Added\n\n- Autoswap feature\n\n### Changed\n\n- Command `pick` has been changed to `set`\n- \ud83d\udea8BREAKING CHANGE! Installation method... see phpswapcli.md for more info.\n- \ud83d\udea8BREAKING CHANGE! If you see \"....phpswap:1: command not found: 8.2.26\", you must re-register, e.g. `phpswap set`\n\n### Removed\n\n- Need to paste command to swap php, it now happens automatically.\n\n## [0.0.10] - 2024-12-02\n\n### Added\n\n- Able to find last version from child directories of a project.\n\n## [0.0.9] - 2024-12-02\n\n### Added\n\n- Remembers the last version used in the CLI command for faster switching (per directory).\n- Unit test coverage.\n\n### Changed\n\n- Moved some classes to new subdirectories.\n\n## [0.0.3] - 2023-10-08\n\n### Removed\n\n- The `no-composer-restore` option due to it being too fragile."},{"id":"readme","title":"PHP Swap","body":"## Summary\n\nProvides a means to easily execute code with PHP versions other than the default. This was first built to run PhpUnit tests within Composer projects across multiple PHP versions. See example below.\n\n## Quick Start\n\nThis simple code example should give you an idea of how this works.\n\n```shell\nmkdir foo\ncd foo\ncomposer init\ncomposer require aklump\/phpswap\nphp -v\n.\/vendor\/bin\/phpswap use 5.6 \"php -v; echo\"\n.\/vendor\/bin\/phpswap use 8.1 \"php -v; echo\"\n```\n\n## What It Does\n\n* Temporarily modifies `$PATH` with a different PHP version binary.\n* If _composer.json_ is present, runs `composer update` so that dependencies appropriate for the swapped PHP version get installed.\n* Runs the given executable, which can be a command or a script path.\n* Lastly, if necessary, runs `composer update` with the original PHP to restore the Composer dependencies.\n\n## What PHP Versions Are Supported?\n\nTo see the available versions, which will echo those versions provided by MAMP you can use the `show` command.\n\n```bash\n.\/vendor\/bin\/phpswap show\n```\n\n## Dependencies\n\n* [MAMP](https:\/\/www.mamp.info\/en\/mamp)\n\n## Getting Started\n\n1. Ensure you have MAMP installed.\n2. Download all PHP versions using MAMP that you hope to swap.\n3. `composer require aklump\/phpswap` in your project.\n4. Use `vendor\/bin\/phpswap show` to see what versions are available.\n5. `.\/phpswap list` to see all available commands.\n\n## Examples with PhpUnit\n\nHere is a pattern you can use to run PhpUnit under PHP 7.1, 7.4 and 8.1.\n\n* Given you have installed phpunit in your project with Composer\n* And you run your tests using `.\/vendor\/bin\/phpunit -c phpunit.xml`\n* Then you can implement PhpSwap in the following way:\n* See also Controller File Example further down.\n\n```shell\n.\/vendor\/bin\/phpswap use 7.1 '.\/vendor\/bin\/phpunit -c phpunit.xml'\n.\/vendor\/bin\/phpswap use 7.4 '.\/vendor\/bin\/phpunit -c phpunit.xml'\n.\/vendor\/bin\/phpswap use 8.1 '.\/vendor\/bin\/phpunit -c phpunit.xml'\n```\n\n## CLI Options\n\n### `-v`\n\nIn verbose mode you will see the Composer output.\n\n### `--working-dir`\n\nThis sets the working directory from which your script is called. This is optional.\n\n## Troubleshooting\n\nDuring execution, a file called _composer.lock.phpswap_ is temporarily created in your project. It contains a copy of the _composer.lock_ file that was in your project before the swap. This file is used to refresh _composer.lock_ at the end of a swap. In some error situations this file may not be deleted. Use the snippet below to recover.\n\nYou may also see \"Composer detected issues in your platform:\" after a swap executed. The same applies here, try the snippet below.\n\n```shell\nmv composer.lock.phpswap composer.lock;composer update\n```\n\n## Controller File Example\n\nHere is a complete snippet for controlling tests. Save as _bin\/run_unit_tests.sh_ and call it like this: `bin\/run_unit_tests.sh -v`. You may leave off the verbose `-v` flag unless troubleshooting.\n\n```bash\n#!\/usr\/bin\/env bash\ns=\"${BASH_SOURCE[0]}\";[[ \"$s\" ]] || s=\"${(%):-%N}\";while [ -h \"$s\" ];do d=\"$(cd -P \"$(dirname \"$s\")\" && pwd)\";s=\"$(readlink \"$s\")\";[[ $s != \/* ]] && s=\"$d\/$s\";done;__DIR__=$(cd -P \"$(dirname \"$s\")\" && pwd)\n\ncd \"$__DIR__\/..\"\n\nverbose=''\nif [[ \"${*}\" == *'-v'* ]]; then\n  verbose='-v'\nfi\n.\/vendor\/bin\/phpswap use 7.3 $verbose '.\/vendor\/bin\/phpunit -c tests_unit\/phpunit.xml'\n.\/vendor\/bin\/phpswap use 7.4 $verbose '.\/vendor\/bin\/phpunit -c tests_unit\/phpunit.xml'\n.\/vendor\/bin\/phpswap use 8.0 $verbose '.\/vendor\/bin\/phpunit -c tests_unit\/phpunit.xml'\n.\/vendor\/bin\/phpswap use 8.1 $verbose '.\/vendor\/bin\/phpunit -c tests_unit\/phpunit.xml'\n.\/vendor\/bin\/phpswap use 8.2 $verbose '.\/vendor\/bin\/phpunit -c tests_unit\/phpunit.xml'\n```"},{"id":"phpswapcli","title":"PhpSwap CLI","body":"This package includes a CLI tool that lets you swap the CLI PHP being used in your terminal. The swap affects the current window only, by modifying and exporting the `$PATH`. Open a new window and the system default PHP will be at play.\n\n## Installing `phpswap` CLI\n\nAdd an alias, which sources the `phpswap` command, adjusting the path as appropriate.\n\n```shell\nalias phpswap=\"source ~\/Code\/Packages\/cli\/phpswap\/app\/cli\/bin\/phpswap\"\n```\n\n## Usage\n\nFor help type `phpswap -h`\n\n### Register a Project's PHP Version\n\n1. In your terminal, `cd` to your project's root directory.\n2. Type `phpswap`\n1. Select the version for your project (current plus all child directories).\n4. Test it with `php -v`\n\n### Register a Different Version\n\nTo change the version for a configured project, use `phpswap set` to access the\n\n### Swap the Version\n\nOnce a project's version has been registered, you may swap the active PHP using `phpswap` from inside that project. Alternately, you can setup up _Auto Swap_ (see below).\n\n```shell\ncd my\/great\/project\nphpswap\n```\n\n## Auto Swap on Directory Change\n\nYou may configure PhpSwap to automatically swap PHP when you change directories. If that directory or one of it's child directories, has been setup with a PhpSwap version, PhpSwap will read that version and automatically swap. This saves you from having to manually type `phpswap`.\n\n**Note: autoswap only works when changing to a directory that contains _.phpswap_**. That is, child directories will not autoswap, whereas **manually typing `phpswap` in a child directory will swap PHP based on a parent directory's configuration**.\n\n### Setup in ZShell\n\nAdd the following to _.zshrc_, adjusting the path to phpswap as appropriate.\n\n```shell\n# PhpSwap functionality to auto-swap PHP when cd-ing into a project.\n# @url https:\/\/github.com\/aklump\/phpswap\nfunction phpswap_autoswap {\n  [[ -f \".phpswap\" ]] && source ~\/Code\/Packages\/cli\/phpswap\/app\/cli\/bin\/phpswap\n}\nautoload -Uz add-zsh-hook\nadd-zsh-hook chpwd phpswap_autoswap\n```"}]